---
- hosts: all
  tasks:
    - name: Clone drupal.
      git:
        repo: "http://git.drupal.org/project/drupal.git"
        dest: "{{ git_dir }}"
        version: "{{ drupal_branch }}"
        update: yes
        force: yes
    - name: Copy files to the web directory.
      synchronize:
        src: "{{ git_dir }}/"
        dest: "{{ web_dir }}"
        delete: yes
        rsync_opts:
          - "--exclude=.git"
    - name: Drush require.
      composer:
        command: require
        arguments: "drush/drush:^9"
        working_dir: "{{ web_dir }}"
    - name: Composer install.
      composer:
        command: install
        working_dir: "{{ web_dir }}"
    # The files directory has to be the same user and group as the web server
    # so that run-tests.sh and PHPUnit don't encounter permission issues.
    - name: Create files directory.
      file:
        path: "{{ web_dir }}/sites/default/files"
        state: directory
        mode: "0777"
        owner: "apache"
        group: "www-data"
    - name: Install drupal
      shell: |
        drush si \
              --uri={{ drupal_uri }} \
              --root={{ web_dir }} \
              --db-url={{ db_url }} \
              -y \
              --account-name={{ drupal_user }} \
              --account-pass={{ drupal_password}}
      args:
        chdir: "{{ web_dir }}"
    # - name: Replace hash_salt
    #   lineinfile:
    #     name: "{{ web_dir }}/sites/default/settings.php"
    #     state: present
    #     regexp: "^\\$settings\\['hash_salt'\\] = '';"
    #     line: "$settings['hash_salt'] = getenv('MYSQL_DATABASE_NAME');"
    - name: Enable Drupal Console.
      composer:
        command: require
        arguments: "drupal/console:^1"
        prefer_dist: yes
        optimize_autoloader: yes
        working_dir: "{{ web_dir }}"
    # @todo Change this to a seperate composer and shell task when Ansible 2.4
    # is available in Dockstack.
    - name: Enable drupal/coder for phpcs
      shell: >
        composer global require drupal/coder &&
        phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer
    # This has to be run during the run phase so the database URI is generated
    # from dropwhale.settings.
    - name: Set various environment vars globally.
      lineinfile:
        dest: "/etc/profile"
        regexp: "^export {{ item.name }}="
        line: "export {{ item.name }}='{{ item.value }}'"
        insertafter: 'EOF'
        create: yes
        state: present
        group: "www-data"
        mode: "0664"
      with_items:
        - { name: "SIMPLETEST_DB", value: "{{ db_url }}" }
        - { name: "SIMPLETEST_BASE_URL", value: "{{ drupal_uri }}" }
        - { name: "BROWSERTEST_OUTPUT_DIRECTORY", value: "{{ simpletest_out_dir }}" }
        - { name: "DRUPAL_VERSION", value: "8" }
        - { name: "MINK_DRIVER_ARGS_JS", value: '["http://phantomjs:8510"]' }
    - name: Create directories to support simpletest.
      file:
        path: "{{ item }}"
        state: directory
        mode: "0777"
      with_items:
        - "{{ simpletest_sites_dir }}"
        - "{{ simpletest_out_dir }}"
    - name: Enable simpletest.
      shell: |
        drush --uri={{ drupal_uri }} --root={{ web_dir }} en -y simpletest
      args:
        chdir: "{{ web_dir }}"
    - name: Copy phpunit.xml.dist phpunit.xml.
      copy:
        src: "{{ web_dir }}/core/phpunit.xml.dist"
        dest: "{{ web_dir }}/core/phpunit.xml"
    - name: Configure phpunit.xml.
      lineinfile:
        path: "{{ web_dir }}/core/phpunit.xml"
        regexp: "<env name=\"{{ item.name }}\" value=\"\"/>"
        line: "<env name=\"{{ item.name }}\" value=\"{{ item.value }}\"/>"
      with_items:
        - {
            name: "SIMPLETEST_BASE_URL",
            value: "{{ drupal_uri }}"
          }
        - {
            name: "SIMPLETEST_DB",
            value: "{{ db_url }}"
          }
        - {
            name: "BROWSERTEST_OUTPUT_DIRECTORY",
            value: "{{ simpletest_out_dir }}"
          }
    - name: Symlink the module directory.
      file:
        src: "{{ module_dir }}"
        dest: "{{ web_dir }}/modules/{{ module_name }}"
        state: link
      when:
        - module_name != ''
    - name: Enable the module.
      shell: |
        drush --uri={{ drupal_uri }} --root={{ web_dir }} en -y {{ module_name }}
      when:
        - module_name != ''
    - name: Enable additional modules, if any.
      shell: |
        drush --uri={{ drupal_uri }} --root={{ web_dir }} en -y {{ additional_modules }}
      when:
        - not (additional_modules | trim == '')
